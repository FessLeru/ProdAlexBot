#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ grid_builder.py
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

from decimal import Decimal, ROUND_DOWN
import logging
from typing import List, Dict, Any

from config.constants import (
    GRID_COVERAGE_PERCENT,
    GRID_LEVELS,
    MARTINGALE_MULTIPLIER,
    TAKE_PROFIT_PERCENT,
    LEVERAGE,
    MARKET_ENTRY
)

from trading.models import TradingConfig
from trading.grid_builder import (
    calculate_total_martingale_multiplier,
    calculate_optimal_base_quantity,
    calculate_martingale_quantities,
    calculate_grid_prices,
    validate_grid_parameters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

def analyze_grid_distribution(test_case: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∏–¥-—Å–µ—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    
    Args:
        test_case: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–µ—Å—Ç–∞
        
    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    """
    print(f"\n{'='*80}")
    print(f"üìä –ê–ù–ê–õ–ò–ó: {test_case['name']}")
    print(f"{'='*80}")

    deposit: Decimal = Decimal(str(test_case['deposit']))
    price: Decimal = Decimal(str(test_case['current_price']))
    symbol: str = test_case['coin']

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏
    config = TradingConfig(
        leverage=test_case.get('leverage', LEVERAGE),
        grid_levels=test_case.get('grid_levels', GRID_LEVELS),
        martingale_multiplier=test_case.get('martingale_multiplier', MARTINGALE_MULTIPLIER),
        coverage_percent=test_case.get('coverage_percent', GRID_COVERAGE_PERCENT),
        take_profit_percent=test_case.get('take_profit_percent', TAKE_PROFIT_PERCENT)
    )

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not validate_grid_parameters(price, deposit, config):
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        return {}

    # 1. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
    print(f"üîß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
    
    grid_prices: List[Decimal] = calculate_grid_prices(price, config)
    total_multiplier: Decimal = calculate_total_martingale_multiplier(config)
    leverage: Decimal = Decimal(str(config.leverage))
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    base_quantity: Decimal = calculate_optimal_base_quantity(deposit, price, config)
    quantities: List[Decimal] = calculate_martingale_quantities(base_quantity, config)

    print(f"   üìä –¶–µ–Ω—ã –≥—Ä–∏–¥–∞: {len(grid_prices)} —É—Ä–æ–≤–Ω–µ–π")
    print(f"   üî¢ –û–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {total_multiplier:.5f}")
    print(f"   üì¶ –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {base_quantity:.8f}")
    print(f"   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–æ–º: {len(quantities)} —É—Ä–æ–≤–Ω–µ–π")

    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∂—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –æ–±—â—É—é –º–∞—Ä–∂—É
    print(f"\nüí∞ –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
    
    total_margin: Decimal = Decimal('0')
    total_quantity: Decimal = Decimal('0')
    weighted_price_sum: Decimal = Decimal('0')
    
    order_details: List[Dict[str, Any]] = []
    
    for i, (grid_price, quantity) in enumerate(zip(grid_prices, quantities)):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
        order_type: str = "MARKET" if (i == 0 and MARKET_ENTRY) else "LIMIT"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        order_value: Decimal = grid_price * quantity
        margin_required: Decimal = order_value / leverage
        price_diff_percent: float = float((grid_price - price) / price * 100)
        
        # –°—É–º–º–∏—Ä—É–µ–º –º–∞—Ä–∂—É (—ç—Ç–æ –∏ –µ—Å—Ç—å –æ–±—â–∞—è –º–∞—Ä–∂–∞)
        total_margin += margin_required
        total_quantity += quantity
        weighted_price_sum += grid_price * quantity
        
        order_details.append({
            'level': i,
            'type': order_type,
            'price': float(grid_price),
            'quantity': float(quantity),
            'value_usdt': float(order_value),
            'margin_usdt': float(margin_required),
            'price_diff_percent': price_diff_percent
        })

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
    average_price: float = float(weighted_price_sum / total_quantity) if total_quantity > 0 else 0

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –ú–ê–†–ñ–ò:")
    print(f"   üíµ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: {deposit:.2f} USDT")
    print(f"   üíµ –û–±—â–∞—è –º–∞—Ä–∂–∞ (—Å—É–º–º–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π): {total_margin:.2f} USDT")

    margin_diff: float = float(total_margin) - float(deposit)
    margin_diff_percent: float = abs(margin_diff) / float(deposit) * 100

    print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {margin_diff:+.2f} USDT ({margin_diff_percent:.1f}%)")
    print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {average_price:.5f}")
    print(f"   üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity:.6f}")

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–µ—Ç–∫–∏
    print(f"\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ï–¢–ö–ò –ü–û {len(order_details)} –£–†–û–í–ù–Ø–ú:")
    print(f"{'Lvl':<3} {'–¢–∏–ø':<6} {'–¶–µ–Ω–∞':<12} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<12} {'–ù–æ–º–∏–Ω–∞–ª':<10} {'–ú–∞—Ä–∂–∞':<8} {'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ':<10}")
    print(f"{'-'*80}")

    for order_detail in order_details:
        print(f"{order_detail['level']:<3} {order_detail['type']:<6} "
              f"{order_detail['price']:<12.5f} {order_detail['quantity']:<12.6f} "
              f"{order_detail['value_usdt']:<10.2f} {order_detail['margin_usdt']:<8.2f} "
              f"{order_detail['price_diff_percent']:+<10.2f}%")

    return {
        'name': test_case['name'],
        'coin': test_case['coin'],
        'requested_deposit': float(deposit),
        'actual_margin': float(total_margin),
        'difference': margin_diff,
        'difference_percent': margin_diff_percent,
        'first_order_margin': order_details[0]['margin_usdt'],
        'total_multiplier': float(total_multiplier),
        'base_quantity': order_details[0]['quantity'],
        'average_price': average_price,
        'total_orders': len(order_details),
        'market_orders': len([o for o in order_details if o['type'] == 'MARKET']),
        'limit_orders': len([o for o in order_details if o['type'] == 'LIMIT'])
    }

def test_edge_cases() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    print(f"\n{'='*80}")
    print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
    print(f"{'='*80}")
    
    edge_cases = [
        {
            'name': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 1,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 0.5,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞',
            'deposit': 100,
            'coin': 'BTC/USDT:USDT',
            'current_price': 45000
        },
        {
            'name': '–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞',
            'deposit': 50,
            'coin': 'DOGE/USDT:USDT',
            'current_price': 0.08
        }
    ]
    
    for case in edge_cases:
        try:
            result = analyze_grid_distribution(case)
            if result:
                print(f"‚úÖ {case['name']}: –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {case['name']}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå {case['name']}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")

def test_different_configurations() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print(f"\n{'='*80}")
    print(f"‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print(f"{'='*80}")
    
    config_tests = [
        {
            'name': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'deposit': 100,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78,
            'leverage': 5,
            'grid_levels': 10,
            'martingale_multiplier': 1.1,
            'coverage_percent': 0.2,
            'take_profit_percent': 0.01
        },
        {
            'name': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'deposit': 100,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78,
            'leverage': 50,
            'grid_levels': 20,
            'martingale_multiplier': 1.5,
            'coverage_percent': 0.6,
            'take_profit_percent': 0.05
        },
        {
            'name': '–°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'deposit': 100,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78,
            'leverage': 20,
            'grid_levels': 15,
            'martingale_multiplier': 1.3,
            'coverage_percent': 0.4,
            'take_profit_percent': 0.02
        }
    ]
    
    for config_test in config_tests:
        try:
            result = analyze_grid_distribution(config_test)
            if result:
                print(f"‚úÖ {config_test['name']}: –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {config_test['name']}: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå {config_test['name']}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø GRID BUILDER")
    print(f"üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: –ü–ª–µ—á–æ={LEVERAGE}x, –£—Ä–æ–≤–Ω–∏={GRID_LEVELS}, –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª={MARTINGALE_MULTIPLIER}x")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ={GRID_COVERAGE_PERCENT*100}%, –¢–ü={TAKE_PROFIT_PERCENT*100}%, MARKET_ENTRY={MARKET_ENTRY}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
    main_test_cases = [
        {
            'name': '–ú–∏–∫—Ä–æ –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 3.44,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–ú–∞–ª—ã–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 25,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 100,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–ë–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 500,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç',
            'deposit': 2000,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        }
    ]

    results: List[Dict[str, Any]] = []
    
    print(f"\n{'='*80}")
    print(f"üìä –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –° –†–ê–ó–ù–´–ú–ò –î–ï–ü–û–ó–ò–¢–ê–ú–ò")
    print(f"{'='*80}")
    
    for test_case in main_test_cases:
        result = analyze_grid_distribution(test_case)
        if result:
            results.append(result)

    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n\nüìà –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*120}")
    print(f"{'–¢–µ—Å—Ç':<20} {'–ú–æ–Ω–µ—Ç–∞':<15} {'–î–µ–ø–æ–∑–∏—Ç':<10} {'–§–∞–∫—Ç.–º–∞—Ä–∂–∞':<12} {'–†–∞–∑–Ω.%':<8} "
          f"{'–°—Ä.—Ü–µ–Ω–∞':<10} {'–û—Ä–¥–µ—Ä–æ–≤':<8} {'Market':<7} {'Limit':<6}")
    print(f"{'-'*120}")

    for result in results:
        print(f"{result['name']:<20} {result['coin']:<15} "
              f"{result['requested_deposit']:<10.0f} {result['actual_margin']:<12.2f} "
              f"{result['difference_percent']:<8.1f}% {result['average_price']:<10.5f} "
              f"{result['total_orders']:<8} {result['market_orders']:<7} {result['limit_orders']:<6}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    test_edge_cases()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    test_different_configurations()

    print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    print(f"üß™ + –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
