"""–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
import asyncio
import logging

from config.constants import COINS, LEVERAGE
from config.settings import settings
from database.connection import db
from trading.celery_worker import start_master_trading
from telegram.bot import start_bot

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def init_database() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
    await db.init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")


def start_trading() -> None:
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Celery."""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –º–æ–Ω–µ—Ç—É (–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
    deposit_per_coin = 20  # USDT –Ω–∞ –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É
    
    start_master_trading.delay(
        api_key=settings.TRADER_API_KEY,
        api_secret=settings.TRADER_API_SECRET,
        api_passphrase=settings.TRADER_API_PASSPHRASE,
        deposit_per_coin=deposit_per_coin
    )
    
    logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(COINS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_database()
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        start_trading()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
        await start_bot()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())