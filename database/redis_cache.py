"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫—ç—à–µ–º —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
import redis.asyncio as redis
import logging
from typing import List

from config.settings import settings

logger = logging.getLogger(__name__)


class RedisCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis –∫—ç—à–µ–º."""
    
    def __init__(self):
        self.redis_client = redis.Redis.from_url(
            settings.REDIS_URL,
            decode_responses=True,
            max_connections=settings.REDIS_MAX_CONNECTIONS
        )
        self.cache_patterns: List[str] = [
            "active_orders:*",      # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            "order_status:*",       # –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤  
            "filled_summary:*",     # –ö—ç—à —Å–≤–æ–¥–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            "take_profit:*"         # –ö—ç—à —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤
        ]
    
    async def clear_all_cache(self) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
        
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∫—ç—à–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
        """
        try:
            logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É Redis –∫—ç—à–∞")
            
            total_deleted = 0
            
            for pattern in self.cache_patterns:
                try:
                    keys = await self.redis_client.keys(pattern)
                    
                    if keys:
                        deleted_count = await self.redis_client.delete(*keys)
                        total_deleted += deleted_count
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}'")
                    else:
                        logger.info(f"‚ÑπÔ∏è –ö–ª—é—á–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}': {e}")
            
            if total_deleted > 0:
                logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ Redis –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {total_deleted} –∫–ª—é—á–µ–π –∫—ç—à–∞")
            else:
                logger.info("‚ÑπÔ∏è Redis –∫—ç—à —É–∂–µ –±—ã–ª –ø—É—Å—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis: {e}")
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis."""
        await self.redis_client.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
cache_manager = RedisCacheManager()
