from typing import List
from decimal import Decimal, ROUND_DOWN
from datetime import datetime
import logging

from config.constants import (
    GRID_COVERAGE_PERCENT,
    GRID_LEVELS,
    MARTINGALE_MULTIPLIER,
    TAKE_PROFIT_PERCENT,
    LEVERAGE,
    MARKET_ENTRY
)
from trading.models import OrderModel, OrderSide, OrderType, OrderStatus, TradingConfig

logger = logging.getLogger(__name__)

def calculate_grid_prices(current_price: Decimal, config: TradingConfig) -> List[Decimal]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä–∏–¥-–æ—Ä–¥–µ—Ä–æ–≤
    
    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        List[Decimal]: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    """
    prices = []
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–Ω–∞ coverage_percent –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π)
    min_price = current_price * (Decimal('1') - Decimal(str(config.coverage_percent)))
    
    # –®–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    price_range = current_price - min_price
    step = price_range / Decimal(str(config.grid_levels - 1))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–Ω–∏–∑
    for i in range(config.grid_levels):
        price = current_price - (step * Decimal(str(i)))
        prices.append(price.quantize(Decimal('0.00001'), rounding=ROUND_DOWN))
    
    return prices

def calculate_martingale_quantities(
    base_quantity: Decimal, 
    config: TradingConfig
) -> List[Decimal]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–æ–º
    
    Args:
        base_quantity: –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        List[Decimal]: –°–ø–∏—Å–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    """
    quantities = []
    multiplier = Decimal(str(config.martingale_multiplier))
    
    for i in range(config.grid_levels):
        if i == 0:
            quantity = base_quantity
        else:
            quantity = base_quantity * (multiplier ** i)
        
        quantities.append(quantity.quantize(Decimal('0.00001'), rounding=ROUND_DOWN))
    
    return quantities

def calculate_optimal_base_quantity(
    deposit_amount: Decimal, 
    current_price: Decimal, 
    config: TradingConfig
) -> Decimal:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
    
    Args:
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        Decimal: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    # –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ —Å –ø–ª–µ—á–æ–º
    available_amount = deposit_amount * Decimal(str(config.leverage))
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
    total_multiplier = Decimal('0')
    multiplier = Decimal(str(config.martingale_multiplier))
    
    for i in range(config.grid_levels):
        if i == 0:
            total_multiplier += Decimal('1')
        else:
            total_multiplier += multiplier ** i
    
    # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –¥–æ—Å—Ç—É–ø–Ω–∞—è_—Å—É–º–º–∞ / (–æ–±—â–∏–π_–º–Ω–æ–∂–∏—Ç–µ–ª—å * —Ü–µ–Ω–∞)
    base_quantity = available_amount / (total_multiplier * current_price)
    
    return base_quantity.quantize(Decimal('0.00001'), rounding=ROUND_DOWN)

def build_grid(
    user_id: int,
    position_id: int,
    symbol: str,
    current_price: Decimal,
    deposit_amount: Decimal,
    config: TradingConfig = None
) -> List[OrderModel]:
    """
    –°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≥—Ä–∏–¥-—Ç–æ—Ä–≥–æ–≤–ª–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        List[OrderModel]: –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    """
    if config is None:
        config = TradingConfig(
            leverage=LEVERAGE,
            grid_levels=GRID_LEVELS,
            martingale_multiplier=MARTINGALE_MULTIPLIER,
            coverage_percent=GRID_COVERAGE_PERCENT,
            take_profit_percent=TAKE_PROFIT_PERCENT
        )
    
    orders = []
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    base_quantity = calculate_optimal_base_quantity(
        deposit_amount=deposit_amount,
        current_price=current_price,
        config=config
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∏–¥-—Å–µ—Ç–∫–µ
    logger.info(f"üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∏–¥-—Å–µ—Ç–∫–∏ –¥–ª—è {symbol}:")
    logger.info(f"   üí∞ –î–µ–ø–æ–∑–∏—Ç: {deposit_amount} USDT")
    logger.info(f"   üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}")
    logger.info(f"   ‚öñÔ∏è –ü–ª–µ—á–æ: {config.leverage}x")
    logger.info(f"   üî¢ –£—Ä–æ–≤–Ω–µ–π –≥—Ä–∏–¥–∞: {config.grid_levels}")
    logger.info(f"   üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {config.coverage_percent * 100}%")
    logger.info(f"   üîÑ –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª: {config.martingale_multiplier}x")
    logger.info(f"   üì¶ –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {base_quantity}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≥—Ä–∏–¥–∞
    grid_prices = calculate_grid_prices(current_price, config)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª–æ–º
    quantities = calculate_martingale_quantities(base_quantity, config)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä–∞
    for i, (price, quantity) in enumerate(zip(grid_prices, quantities)):
        # –ü–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä - —Ä—ã–Ω–æ—á–Ω—ã–π –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º MARKET_ENTRY
        if i == 0 and MARKET_ENTRY:
            order = OrderModel(
                user_id=user_id,
                position_id=position_id,
                order_id=f"market_{symbol}_{user_id}_{position_id}_{i}",
                symbol=symbol,
                side=OrderSide.BUY,
                order_type=OrderType.MARKET,
                price=current_price,
                quantity=quantity,
                status=OrderStatus.PENDING,
                grid_level=i,
                created_at=datetime.utcnow()
            )
        else:
            # –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            order = OrderModel(
                user_id=user_id,
                position_id=position_id,
                order_id=f"limit_{symbol}_{user_id}_{position_id}_{i}",
                symbol=symbol,
                side=OrderSide.BUY,
                order_type=OrderType.LIMIT,
                price=price,
                quantity=quantity,
                status=OrderStatus.PENDING,
                grid_level=i,
                created_at=datetime.utcnow()
            )
        
        orders.append(order)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        order_value = order.price * order.quantity
        margin_required = order_value / Decimal(str(config.leverage))
        
        if order.order_type == OrderType.MARKET:
            logger.info(f"   üéØ –û—Ä–¥–µ—Ä #{i+1:2d} (MARKET): "
                       f"üíµ {order.quantity:.5f} @ {order.price:.5f} = {order_value:.2f} USDT "
                       f"(–º–∞—Ä–∂–∞: {margin_required:.2f})")
        else:
            price_diff_percent = ((order.price - current_price) / current_price * 100)
            logger.info(f"   üìå –û—Ä–¥–µ—Ä #{i+1:2d} (LIMIT):  "
                       f"üíµ {order.quantity:.5f} @ {order.price:.5f} = {order_value:.2f} USDT "
                       f"(–º–∞—Ä–∂–∞: {margin_required:.2f}, {price_diff_percent:+.2f}%)")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_value = sum(order.price * order.quantity for order in orders)
    total_margin = total_value / Decimal(str(config.leverage))
    logger.info(f"‚úÖ –ì—Ä–∏–¥-—Å–µ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ {total_value:.2f} USDT "
               f"(—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: {total_margin:.2f} USDT)")
    
    return orders

def calculate_take_profit_price(average_price: Decimal, config: TradingConfig) -> Decimal:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    
    Args:
        average_price: –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        Decimal: –¶–µ–Ω–∞ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    """
    tp_multiplier = Decimal('1') + Decimal(str(config.take_profit_percent))
    take_profit_price = average_price * tp_multiplier
    return take_profit_price.quantize(Decimal('0.00001'), rounding=ROUND_DOWN)

def create_take_profit_order(
    user_id: int,
    position_id: int,
    symbol: str,
    average_price: Decimal,
    total_quantity: Decimal,
    config: TradingConfig = None
) -> OrderModel:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        position_id: ID –ø–æ–∑–∏—Ü–∏–∏
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        average_price: –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
        total_quantity: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        OrderModel: –û—Ä–¥–µ—Ä —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    """
    if config is None:
        config = TradingConfig(take_profit_percent=TAKE_PROFIT_PERCENT)
    
    take_profit_price = calculate_take_profit_price(average_price, config)
    
    return OrderModel(
        user_id=user_id,
        position_id=position_id,
        order_id=f"tp_{symbol}_{user_id}_{position_id}",
        symbol=symbol,
        side=OrderSide.SELL,
        order_type=OrderType.TAKE_PROFIT,
        price=take_profit_price,
        quantity=total_quantity,
        status=OrderStatus.PENDING,
        created_at=datetime.utcnow()
    )

def validate_grid_parameters(
    current_price: Decimal,
    deposit_amount: Decimal,
    config: TradingConfig
) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥—Ä–∏–¥–∞ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
    
    Args:
        current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if current_price <= 0:
            return False
        
        if deposit_amount <= 0:
            return False
        
        if config.grid_levels < 2:
            return False
        
        if config.coverage_percent <= 0 or config.coverage_percent >= 1:
            return False
        
        if config.leverage < 1:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 0
        base_quantity = calculate_optimal_base_quantity(
            deposit_amount, current_price, config
        )
        
        if base_quantity <= 0:
            return False
        
        return True
        
    except Exception:
        return False

def get_grid_statistics(orders: List[OrderModel]) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–µ
    
    Args:
        orders: –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∫–µ
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∏–¥–∞
    """
    if not orders:
        return {}
    
    total_quantity = sum(order.quantity for order in orders)
    total_value = sum(order.price * order.quantity for order in orders)
    
    prices = [order.price for order in orders]
    min_price = min(prices)
    max_price = max(prices)
    
    market_orders = [o for o in orders if o.order_type == OrderType.MARKET]
    limit_orders = [o for o in orders if o.order_type == OrderType.LIMIT]
    
    return {
        "symbol": orders[0].symbol,
        "total_orders": len(orders),
        "market_orders_count": len(market_orders),
        "limit_orders_count": len(limit_orders),
        "total_quantity": float(total_quantity),
        "total_value_usdt": float(total_value),
        "average_price": float(total_value / total_quantity) if total_quantity > 0 else 0,
        "price_range": {
            "min": float(min_price),
            "max": float(max_price),
            "spread_percent": float((max_price - min_price) / max_price * 100)
        },
        "grid_levels": len(set(o.grid_level for o in orders if o.grid_level is not None)),
        "created_at": orders[0].created_at.isoformat() if orders[0].created_at else None
    }