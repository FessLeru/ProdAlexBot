import asyncio
import logging
from typing import List, Optional, Tuple, Union
from decimal import Decimal
from datetime import datetime
import json
from aiokafka import AIOKafkaProducer

from api.bitget_api import BitgetAPI
from database.repositories.limit_order_repo import LimitOrderRepository
from database.repositories.take_profit_repo import TakeProfitRepository
from config.constants import LEVERAGE, MARGIN_MODE, CHECK_DELAY, TAKE_PROFIT_PERCENT
from config.settings import settings
from trading.grid_builder import build_grid
from trading.models import OrderModel, OrderStatusUpdate, OrderStatus, KafkaOrderMessage, OrderSide, OrderType

logger = logging.getLogger(__name__)

class OrderTracker: 
    def __init__(self, api_key: str, api_secret: str, api_passphrase: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á
            api_secret: API —Å–µ–∫—Ä–µ—Ç  
            api_passphrase: API –ø–∞—Ä–æ–ª—å
        """
        self.api_key = api_key
        self.api_secret = api_secret
        self.api_passphrase = api_passphrase
        
        self.limit_repo = LimitOrderRepository()
        self.tp_repo = TakeProfitRepository()
        
        # Kafka producer –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.kafka_producer: Optional[AIOKafkaProducer] = None
        self._kafka_started: bool = False

    async def start_kafka_producer(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ Kafka producer
        
        Returns:
            bool: True –µ—Å–ª–∏ producer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        try:    
            self.kafka_producer = AIOKafkaProducer(
                bootstrap_servers=settings.KAFKA_SERVERS,
                value_serializer=lambda x: json.dumps(x, default=str).encode('utf-8'),
                request_timeout_ms=30000,
                retry_backoff_ms=100,
                max_block_ms=5000
            )
            
            await self.kafka_producer.start()
            self._kafka_started = True
            
            logger.info("‚úÖ Kafka producer –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Kafka producer: {e}")
            self.kafka_producer = None
            self._kafka_started = False
            return False

    async def stop_kafka_producer(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka producer"""
        try:
            if self.kafka_producer and self._kafka_started:
                await self.kafka_producer.stop()
                logger.info("‚úÖ Kafka producer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Kafka producer: {e}")
        finally:
            self.kafka_producer = None
            self._kafka_started = False

    async def __aenter__(self):
        """Async context manager entry"""
        await self.start_kafka_producer()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.stop_kafka_producer()

    async def start_trading_for_symbol(self, symbol: str, deposit_amount: Decimal = Decimal('100')) -> bool:
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ USDT
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—è
        """
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –∏ —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏
            leverage_ok = await api.set_leverage(symbol, LEVERAGE)
            
            if not leverage_ok:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {symbol}")
                return False
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await api.get_ticker_price(symbol)
            if not current_price:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}")
                return False
            
            # 3. –°—Ç—Ä–æ–∏–º —Å–µ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤
            orders = build_grid(
                user_id=1,  # –ü–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å
                position_id=1,
                symbol=symbol,
                current_price=current_price,
                deposit_amount=deposit_amount
            )
            
            # 4. –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
            placed_orders = []
            for order in orders:
                if order.order_type == OrderType.MARKET:
                    # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–∏–Ω–∞–ª –≤ USDT
                    notional_usdt = float(order.quantity * order.price)
                    result = await api.create_market_order(symbol, order.side, notional_usdt)
                else:
                    # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
                    result = await api.create_limit_order(symbol, order.side, order.quantity, order.price)
                
                if result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
                    order.order_id = result.order_id
                    order.user_id = result.user_id
                    order.position_id = result.position_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    await self.limit_repo.save_order(order)
                    placed_orders.append(order)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Kafka
                    await self._send_order_notification(order)
                    
                    logger.info(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä {order.order_id} {order.side} {symbol}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                await asyncio.sleep(0.1)
            
            logger.info(f"‚úÖ –°–µ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è {symbol}: {len(placed_orders)}/{len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            return len(placed_orders) > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {e}")
            return False

    async def track_symbol_orders(self, symbol: str) -> Optional[str]:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            
        Returns:
            Optional[str]: 'restart' –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, None –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            tp_result = await self._check_take_profit(symbol)
            if tp_result == 'filled':
                logger.info(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–ª—è {symbol} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                return 'restart'
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞  
            active_order_ids = await self.limit_repo.get_active_orders_ids(symbol)
            
            if not active_order_ids:
                logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
                return None
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
            updates, should_update_tp = await self._check_limit_orders_optimized(symbol, active_order_ids)
            
            # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–æ–º
            if updates:
                await self.limit_repo.batch_update_order_statuses(updates)
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if should_update_tp:
                await self._update_take_profit(symbol)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {symbol}: {e}")
            return None

    async def _check_take_profit(self, symbol: str) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            
        Returns:
            Optional[str]: –°—Ç–∞—Ç—É—Å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        """
        try:
            tp_order = await self.tp_repo.get_active_take_profit(symbol)
            if not tp_order:
                return None
            
            # –°–æ–∑–¥–∞–µ–º API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
            order_info = await api.fetch_order(tp_order.order_id, symbol)
            
            if order_info:
                status = order_info.get('status', 'unknown')
                
                if status in ['closed', 'filled']:
                    # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω
                    await self.tp_repo.mark_filled(tp_order.order_id)
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞
                    await self._cancel_remaining_orders(symbol)
                    
                    return 'filled'
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ {symbol}: {e}")
            return None

    async def _check_limit_orders_optimized(self, symbol: str, order_ids: List[str]) -> Tuple[List[OrderStatusUpdate], bool]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            order_ids: –°–ø–∏—Å–æ–∫ ID –æ—Ä–¥–µ—Ä–æ–≤
            
        Returns:
            Tuple[List[OrderStatusUpdate], bool]: –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–ü
        """
        updates = []
        should_update_tp = False
        
        api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
        
        try:
            for order_id in order_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–∞
                cached_status = await self.limit_repo.get_order_status_cached(order_id)
                if cached_status == 'filled':
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∏—Ä–∂–µ
                order_info = await api.fetch_order(order_id, symbol)
                if not order_info:
                    continue
                
                status = order_info.get('status', 'unknown')
                filled_qty = order_info.get('filled', 0)
                
                if status == 'open':
                    # –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
                    break
                    
                elif status in ['closed', 'filled', 'partial-filled']:
                    # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                    update = OrderStatusUpdate(
                        order_id=order_id,
                        status=OrderStatus.FILLED if status in ['closed', 'filled'] else OrderStatus.PARTIAL_FILLED,
                        filled_quantity=Decimal(str(filled_qty)) if filled_qty else None,
                        filled_at=datetime.utcnow()
                    )
                    
                    updates.append(update)
                    should_update_tp = True
                    
                    # –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω - —Ç–æ–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    if status == 'partial-filled':
                        break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.05)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
        
        return updates, should_update_tp

    async def _update_take_profit(self, symbol: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –æ—Ä–¥–µ—Ä–∞–º
            summary = await self.limit_repo.get_filled_orders_summary(symbol)
            
            if summary['total_quantity'] == 0:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            avg_price = summary['weighted_price']
            tp_price = avg_price * Decimal(str(1 + TAKE_PROFIT_PERCENT))
            total_quantity = summary['total_quantity']
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            current_tp = await self.tp_repo.get_active_take_profit(symbol)
            if current_tp:
                api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
                await api.cancel_order(current_tp.order_id, symbol)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –±–∏—Ä–∂–µ
            api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
            tp_order = await api.create_limit_order(
                symbol=symbol,
                side=OrderSide.SELL,
                amount=total_quantity,
                price=tp_price
            )
            
            if tp_order:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await self.tp_repo.create_take_profit(
                    symbol=symbol,
                    order_id=tp_order.order_id,
                    price=tp_price,
                    quantity=total_quantity
                )
                
                logger.info(f"üéØ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {symbol}: {tp_price} x {total_quantity}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ {symbol}: {e}")

    async def _cancel_remaining_orders(self, symbol: str):
        """
        –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        try:
            active_orders = await self.limit_repo.get_active_orders_ids(symbol)
            
            if not active_orders:
                return
            
            api = BitgetAPI(self.api_key, self.api_secret, self.api_passphrase)
            updates = []
            
            for order_id in active_orders:
                success = await api.cancel_order(order_id, symbol)
                if success:
                    updates.append(OrderStatusUpdate(
                        order_id=order_id,
                        status=OrderStatus.CANCELLED
                    ))
                
                await asyncio.sleep(0.05)
            
            # –ë–∞—Ç—á–µ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if updates:
                await self.limit_repo.batch_update_order_statuses(updates)
            
            logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {len(updates)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")

    async def _send_order_notification(self, order: OrderModel) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Kafka –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            order: –ú–æ–¥–µ–ª—å –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            message = KafkaOrderMessage(
                symbol=order.symbol,
                order_id=order.order_id,
                side=order.side,
                order_type=order.order_type,
                price=order.price,
                quantity=order.quantity,
                user_id=order.user_id
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump() –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ dict()
            await self.kafka_producer.send(
                settings.KAFKA_TOPIC_NOTIFICATIONS,
                value=message.model_dump()
            )
            
            logger.debug(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order.order_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {order.order_id}: {e}")
            return False