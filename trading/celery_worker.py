import asyncio
from celery import Celery
from celery.signals import worker_ready
import logging
from decimal import Decimal

from config.settings import settings
from config.constants import COINS, RESTART_DELAY
from trading.order_tracker import OrderTracker

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
celery_app = Celery(
    'bybit_trading_bot',
    broker=settings.CELERY_BROKER_URL,
    backend=settings.CELERY_RESULT_BACKEND
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
celery_app.conf.update(
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    timezone='UTC',
    enable_utc=True,
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
    worker_prefetch_multiplier=1,
    task_acks_late=True,
    worker_max_tasks_per_child=1000,
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    task_compression='gzip',
    result_compression='gzip',
    
    # –†–æ—É—Ç–∏–Ω–≥ –∑–∞–¥–∞—á
    task_routes={
        'trading.celery_worker.start_symbol_trading': {'queue': 'trading'},
        'trading.celery_worker.track_symbol_continuously': {'queue': 'tracking'},
        'trading.celery_worker.restart_symbol_after_delay': {'queue': 'restart'},
    },
    
    # –¢–∞–π–º–∞—É—Ç—ã
    task_soft_time_limit=300,  # 5 –º–∏–Ω—É—Ç
    task_time_limit=600,       # 10 –º–∏–Ω—É—Ç
)

@worker_ready.connect
def at_start(sender, **kwargs):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Ä–∫–µ—Ä–∞"""
    logger.info("üöÄ Celery –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@celery_app.task(bind=True, name='start_master_trading')
def start_master_trading(self, api_key: str, api_secret: str, deposit_per_coin: float = 100.0):
    """
    –ú–∞—Å—Ç–µ—Ä-–∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º
    
    Args:
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        deposit_per_coin: –î–µ–ø–æ–∑–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –≤ USDT
    """
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä-–∑–∞–¥–∞—á–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        for coin in COINS:
            start_symbol_trading.delay(
                symbol=coin,
                api_key=api_key,
                api_secret=api_secret,
                deposit_amount=deposit_per_coin
            )
            logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –¥–ª—è {coin}")
        
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(COINS)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á")
        return f"Started trading for {len(COINS)} coins"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä-–∑–∞–¥–∞—á–µ: {e}")
        raise

@celery_app.task(bind=True, name='start_symbol_trading')
def start_symbol_trading(self, symbol: str, api_key: str, api_secret: str, deposit_amount: float):
    """
    –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        api_key: API –∫–ª—é—á  
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")
    
    async def run_trading():
        try:
            tracker = OrderTracker(api_key, api_secret)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            success = await tracker.start_trading_for_symbol(
                symbol=symbol,
                deposit_amount=Decimal(str(deposit_amount))
            )
            
            if success:
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é
                track_symbol_continuously.delay(
                    symbol=symbol,
                    api_key=api_key,
                    api_secret=api_secret,
                    deposit_amount=deposit_amount
                )
                logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {symbol}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è {symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {e}")
            raise
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_trading())
    finally:
        loop.close()

@celery_app.task(bind=True, name='track_symbol_continuously')
def track_symbol_continuously(self, symbol: str, api_key: str, api_secret: str, deposit_amount: float):
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç  
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
    """
    logger.info(f"üëÅÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {symbol}")
    
    async def run_tracking():
        try:
            tracker = OrderTracker(api_key, api_secret)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞
            result = await tracker.track_symbol_orders(symbol)
            
            if result == 'restart':
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω - –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                logger.info(f"üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ {symbol} —á–µ—Ä–µ–∑ {RESTART_DELAY} —Å–µ–∫")
                
                restart_symbol_after_delay.apply_async(
                    args=[symbol, api_key, api_secret, deposit_amount],
                    countdown=RESTART_DELAY
                )
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                track_symbol_continuously.apply_async(
                    args=[symbol, api_key, api_secret, deposit_amount],
                    countdown=2  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {symbol}: {e}")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            track_symbol_continuously.apply_async(
                args=[symbol, api_key, api_secret, deposit_amount],
                countdown=5
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º event loop
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_tracking())
    finally:
        loop.close()

@celery_app.task(bind=True, name='restart_symbol_after_delay')
def restart_symbol_after_delay(self, symbol: str, api_key: str, api_secret: str, deposit_amount: float):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        api_key: API –∫–ª—é—á
        api_secret: API —Å–µ–∫—Ä–µ—Ç
        deposit_amount: –†–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞
    """
    logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")
    
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
    start_symbol_trading.delay(
        symbol=symbol,
        api_key=api_key,
        api_secret=api_secret,
        deposit_amount=deposit_amount
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

@celery_app.task(name='get_trading_status')
def get_trading_status():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –≤—Å–µ–º –º–æ–Ω–µ—Ç–∞–º
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ Redis
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    return {
        'active_coins': len(COINS),
        'coins': COINS,
        'status': 'running',
        'timestamp': asyncio.get_event_loop().time()
    }

@celery_app.task(name='stop_all_trading')
def stop_all_trading():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á)
    
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks = celery_app.control.inspect().active()
        
        if active_tasks:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
            for worker_name, tasks in active_tasks.items():
                for task in tasks:
                    if task['name'].startswith('trading.celery_worker'):
                        celery_app.control.revoke(task['id'], terminate=True)
                        logger.info(f"üõë –û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task['id']}")
        
        logger.info("üõë –í—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return "All trading tasks stopped"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        return f"Error stopping trading: {e}"


@celery_app.task(name='health_check')
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–∞
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞
    """
    return {
        'status': 'healthy',
        'timestamp': asyncio.get_event_loop().time(),
        'worker_id': health_check.request.id,
        'active_coins': len(COINS)
    }

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    celery_app.start()