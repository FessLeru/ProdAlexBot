import asyncio
from celery import Celery
import logging

from config.settings import settings
from config.constants import COINS
from trading.order_tracker import OrderTracker

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery
celery_app = Celery(
    'trading_bot',
    broker=settings.CELERY_BROKER_URL,
    backend=settings.CELERY_RESULT_BACKEND
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    timezone='UTC',
    enable_utc=True,
    worker_prefetch_multiplier=1,
    task_acks_late=True,
)

@celery_app.task(bind=True)
def start_trading_cycle(self, api_key: str, api_secret: str, api_passphrase: str):
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    asyncio.sleep(60)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
    for coin in COINS:
        track_coin_orders.delay(coin, api_key, api_secret, api_passphrase)
        logger.info(f"üìä –ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è {coin}")
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã")

@celery_app.task(bind=True)
def track_coin_orders(self, symbol: str, api_key: str, api_secret: str, api_passphrase: str):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
    
    async def run_tracker():
        tracker = OrderTracker(api_key, api_secret, api_passphrase)
        await tracker.track_symbol(symbol)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_tracker())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è {symbol}: {e}")
        raise
    finally:
        loop.close()
