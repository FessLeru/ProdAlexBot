import asyncio
import logging

from aiokafka import AIOKafkaConsumer

from config.settings import settings
from telegram.bot_instance import bot

logger = logging.getLogger(__name__)


async def start_kafka_consumer() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    consumer = AIOKafkaConsumer(
        'trading_notifications',
        bootstrap_servers=settings.KAFKA_SERVERS,
        group_id='telegram_bot'
    )
    
    await consumer.start()
    logger.info("Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
    
    try:
        async for message in consumer:
            try:
                notification = message.value.decode('utf-8')
                await _notify_admin(notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kafka —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è: {e}")
    finally:
        await consumer.stop()


async def _notify_admin(text: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        for admin_id in settings.ADMIN_TELEGRAM_IDS:
            await bot.send_message(admin_id, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")


async def start_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–º."""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –≤ —Ñ–æ–Ω–µ
    kafka_task = asyncio.create_task(start_kafka_consumer())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.polling()
