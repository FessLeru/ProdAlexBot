import asyncio
import logging
from typing import Optional

from aiokafka import AIOKafkaConsumer
from aiokafka.errors import KafkaError

from config.settings import settings
from telegram.bot_instance import bot
from telegram.handlers import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

logger = logging.getLogger(__name__)


async def start_kafka_consumer() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    consumer: Optional[AIOKafkaConsumer] = None
    
    try:
        consumer = AIOKafkaConsumer(
            settings.KAFKA_TOPIC_NOTIFICATIONS,
            bootstrap_servers=settings.KAFKA_SERVERS,
            group_id='telegram_bot',
            auto_offset_reset='latest',
            enable_auto_commit=True,
            auto_commit_interval_ms=1000
        )
        
        await consumer.start()
        logger.info("‚úÖ Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        async for message in consumer:
            try:
                notification = message.value.decode('utf-8')
                await _notify_admin(notification)
                logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Kafka —Å–æ–æ–±—â–µ–Ω–∏–µ: {notification[:50]}...")
            except UnicodeDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Kafka —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kafka —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
    except KafkaError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Kafka –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è: {e}")


async def _notify_admin(text: str) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        for admin_id in settings.ADMIN_TELEGRAM_IDS:
            try:
                await bot.send_message(admin_id, text)
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")


async def start_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–º."""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(
        start_kafka_consumer(),
        bot.polling()
    )
