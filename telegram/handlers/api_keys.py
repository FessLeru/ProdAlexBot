"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π."""
import logging

from telebot.types import Message

from config.settings import settings
from database.connection import db
from database.repositories.user_repo import UserRepository
from trading.models import UserStatus
from utils.encryption import encrypt_data
from telegram.bot_instance import bot
from telegram.states import state_storage, MyStates

logger = logging.getLogger(__name__)


@bot.message_handler(state=MyStates.api_key)
async def api_key_handler(message: Message, state) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞."""
    state.set(MyStates.api_secret)
    state.add_data(api_key=message.text.strip())
    await bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API Secret:",
        parse_mode="HTML"
    )


@bot.message_handler(state=MyStates.api_secret)
async def api_secret_handler(message: Message, state) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API —Å–µ–∫—Ä–µ—Ç–∞."""
    state.set(MyStates.api_passphrase)
    state.add_data(api_secret=message.text.strip())
    await bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É API Passphrase:",
        parse_mode="HTML"
    )


@bot.message_handler(state=MyStates.api_passphrase)
async def api_passphrase_handler(message: Message, state) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API —Ñ—Ä–∞–∑—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π."""
    data = state.get_data()
    api_key = data.get("api_key")
    api_secret = data.get("api_secret")
    api_passphrase = message.text.strip()

    try:
        # –®–∏—Ñ—Ä—É–µ–º –∫–ª—é—á–∏
        encrypted_key = encrypt_data(api_key)
        encrypted_secret = encrypt_data(api_secret)
        encrypted_passphrase = encrypt_data(api_passphrase)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        user_repo = UserRepository(db)
        await user_repo.update_api_keys(
            user_id=message.from_user.id,
            api_key_encrypted=encrypted_key,
            api_secret_encrypted=encrypted_secret,
            api_passphrase_encrypted=encrypted_passphrase
        )

        await user_repo.update_user_status(
            user_id=message.from_user.id,
            status=UserStatus.ACTIVE,
            is_following=True
        )

        await bot.send_message(
            message.chat.id,
            "‚úÖ API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–ø–∏-—Ç—Ä–µ–π–¥–∏–Ω–≥–µ.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await _notify_admin(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {e}")
        await bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    state.delete_state()


async def _notify_admin(text: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        for admin_id in settings.ADMIN_TELEGRAM_IDS:
            try:
                await bot.send_message(admin_id, text)
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
