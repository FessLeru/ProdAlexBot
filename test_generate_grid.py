#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã grid_builder.py
"""

from decimal import Decimal
import logging

from config.constants import (
    GRID_COVERAGE_PERCENT,
    GRID_LEVELS,
    MARTINGALE_MULTIPLIER,
    TAKE_PROFIT_PERCENT,
    LEVERAGE,
    MARKET_ENTRY,
    MIN_MARKET_ORDER_MARGIN_USDT
)

from trading.models import TradingConfig, OrderModel, OrderSide, OrderType, OrderStatus
from trading.grid_builder import (
    build_grid,
    calculate_total_martingale_multiplier,
    calculate_optimal_base_quantity,
    validate_minimum_market_order,
    adjust_for_minimum_market_order,
    calculate_martingale_quantities,
    get_grid_statistics,
    calculate_grid_prices,
    calculate_take_profit_price,
    create_take_profit_order,
    validate_grid_parameters
)

logging.basicConfig(level=logging.WARNING, format='%(message)s')

def test_grid_calculation(test_case: dict) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –≥—Ä–∏–¥-—Å–µ—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞"""
    print(f"\n{'='*80}")
    print(f"üìä –¢–ï–°–¢: {test_case['name']}")
    print(f"{'='*80}")

    deposit = Decimal(str(test_case['deposit']))
    price = Decimal(str(test_case['current_price']))
    symbol = test_case['coin']

    config = TradingConfig(
        leverage=LEVERAGE,
        grid_levels=GRID_LEVELS,
        martingale_multiplier=MARTINGALE_MULTIPLIER,
        coverage_percent=GRID_COVERAGE_PERCENT,
        take_profit_percent=TAKE_PROFIT_PERCENT
    )

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not validate_grid_parameters(price, deposit, config):
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        return {}

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    grid_prices = calculate_grid_prices(price, config)
    total_multiplier = calculate_total_martingale_multiplier(config)
    base_quantity = calculate_optimal_base_quantity(deposit, price, config)
    adjusted_quantity = adjust_for_minimum_market_order(deposit, price, config)
    quantities = calculate_martingale_quantities(adjusted_quantity, config)

    print(f"üìä –†–∞—Å—á–µ—Ç—ã:")
    print(f"   –¶–µ–Ω—ã –≥—Ä–∏–¥–∞: {len(grid_prices)} —É—Ä–æ–≤–Ω–µ–π")
    print(f"   –û–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {total_multiplier:.5f}")
    print(f"   –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {base_quantity:.8f}")
    print(f"   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {adjusted_quantity:.8f}")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∏–¥-—Å–µ—Ç–∫—É
    orders = build_grid(
        user_id=1,
        position_id=1,
        symbol=symbol,
        current_price=price,
        deposit_amount=deposit,
        config=config
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_grid_statistics(orders, config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    average_price = stats['summary']['average_price']
    total_quantity = stats['summary']['total_quantity']
    take_profit_price = calculate_take_profit_price(Decimal(str(average_price)), config)
    take_profit_order = create_take_profit_order(
        user_id=1,
        position_id=1,
        symbol=symbol,
        average_price=Decimal(str(average_price)),
        total_quantity=Decimal(str(total_quantity)),
        config=config
    )

    print(f"\nüí∞ –ò–¢–û–ì–û–í–ê–Ø –ú–ê–†–ñ–ê:")
    print(f"   –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è: {deposit:.2f} USDT")
    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è: {stats['summary']['total_margin_usdt']:.2f} USDT")

    margin_diff = stats['summary']['total_margin_usdt'] - float(deposit)
    margin_diff_percent = abs(margin_diff) / float(deposit) * 100

    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {margin_diff:+.2f} USDT ({margin_diff_percent:.1f}%)")

    print(f"\nüéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢:")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {average_price:.5f}")
    print(f"   –¶–µ–Ω–∞ –¢–ü: {take_profit_price:.5f}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–ü: {total_quantity:.6f}")
    print(f"   –ü—Ä–∏–±—ã–ª—å: {((take_profit_price - Decimal(str(average_price))) / Decimal(str(average_price)) * 100):.2f}%")

    print(f"\nüìã –í–°–ï {len(stats['order_details'])} –û–†–î–ï–†–û–í:")
    print(f"{'Lvl':<3} {'–¢–∏–ø':<6} {'–¶–µ–Ω–∞':<12} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<12} {'–ù–æ–º–∏–Ω–∞–ª':<10} {'–ú–∞—Ä–∂–∞':<8} {'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ':<10}")
    print(f"{'-'*80}")

    for order_detail in stats['order_details']:
        print(f"{order_detail['level']:<3} {order_detail['type']:<6} "
              f"{order_detail['price']:<12.5f} {order_detail['quantity']:<12.6f} "
              f"{order_detail['value_usdt']:<10.2f} {order_detail['margin_usdt']:<8.2f} "
              f"{order_detail['price_diff_percent']:+<10.2f}%")

    return {
        'name': test_case['name'],
        'coin': test_case['coin'],
        'requested_deposit': float(deposit),
        'actual_margin': stats['summary']['total_margin_usdt'],
        'difference': margin_diff,
        'difference_percent': margin_diff_percent,
        'first_order_margin': stats['order_details'][0]['margin_usdt'],
        'min_check_passed': stats['validation']['margin_check_passed'],
        'total_multiplier': float(total_multiplier),
        'base_quantity': stats['order_details'][0]['quantity'],
        'take_profit_price': float(take_profit_price),
        'average_price': average_price,
        'profit_percent': float((take_profit_price - Decimal(str(average_price))) / Decimal(str(average_price)) * 100)
    }

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã —Å –ø–æ–Ω—è—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    test_cases = [
        {
            'name': '–ú–∞–ª—ã–π –¥–µ–ø–æ–∑–∏—Ç CRV',
            'deposit': 10,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç CRV',
            'deposit': 30,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        },
        {
            'name': '–ë–æ–ª—å—à–æ–π –¥–µ–ø–æ–∑–∏—Ç CRV',
            'deposit': 1000,
            'coin': 'CRV/USDT:USDT',
            'current_price': 0.78
        }
    ]

    results = []
    for test_case in test_cases:
        result = test_grid_calculation(test_case)
        results.append(result)

    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n\nüìà –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*120}")
    print(f"{'–¢–µ—Å—Ç':<20} {'–ú–æ–Ω–µ—Ç–∞':<15} {'–î–µ–ø–æ–∑–∏—Ç':<10} {'–§–∞–∫—Ç.–º–∞—Ä–∂–∞':<12} {'–†–∞–∑–Ω.%':<8} {'–¢–ü —Ü–µ–Ω–∞':<10} {'–ü—Ä–∏–±—ã–ª—å%':<10} {'–ú–∏–Ω.—á–µ–∫':<8}")
    print(f"{'-'*120}")

    for result in results:
        status = "‚úÖ" if result['min_check_passed'] else "‚ùå"
        print(f"{result['name']:<20} {result['coin']:<15} "
              f"{result['requested_deposit']:<10.0f} {result['actual_margin']:<12.2f} "
              f"{result['difference_percent']:<8.1f}% {result['take_profit_price']:<10.5f} "
              f"{result['profit_percent']:<10.2f}% {status:<8}")

    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()